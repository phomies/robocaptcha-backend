schema {
    query: Query
    mutation: Mutation
}
scalar Date

type User {
    _id: ID
    name: String
    password: String
    email: String
    phoneNumber: String
    maskedNumber: String
    dateJoined: Date
    whitelist: [Int]
    blacklist: [Int]
    verificationLevel: Int
    subscriptionHistory: [Payment]
    callHistory: [ID]
    notificationHistory: [ID]
}

type Payment {
    dateStart: Date
    dateEnd: Date
    amount: Float
    transactionId: String
    plan: String
}

input NewUserInput {
    name: String!
    email: String!
    password: String!
    phoneNumber: String!
    maskedNumber: String!
    verificationLevel: Int
}

input UserInput {
    _id: ID!
    name: String
    password: String
    newPassword: String
    email: String
    phoneNumber: String
    maskedNumber: String
    whitelist: [Int]
    blacklist: [Int]
    verificationLevel: Int
    subscriptionHistory: [PaymentInput]
}

input PaymentInput {
    dateStart: Date
    dateEnd: Date
    amount: Float
    transactionId: String
    plan: String
}

type Call {
    _id: ID
    dateTime: Date
    callSid: String
    from: String
    toUserId: ID
    action: String
}

type Notification {
    _id: ID
    userId: ID,
    content: String,
    read: Boolean,
    url: String,
    dateTime: Date,
}

type Query {
    getAllUsers: [User]
    getUser(id: ID): User
}

type Mutation {
    createUser(userInput: NewUserInput): User
    updateUser(userInput: UserInput): User
    deleteUser(id: ID): Boolean
}
